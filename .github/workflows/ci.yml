name: ci

on:
  pull_request:
    types: [opened, synchronize]

jobs:

  test:
    name: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        terraform_version: ['11','12','13','14','15','1.0','1.1']

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go get -v -t -d ./...

      - name: Install tfschema
        run: |
          wget https://github.com/minamijoyo/tfschema/releases/download/v0.3.0/tfschema_0.3.0_linux_amd64.tar.gz
          mkdir $GITHUB_WORKSPACE/.tfschema
          tar -xvf tfschema_0.3.0_linux_amd64.tar.gz -C $GITHUB_WORKSPACE/.tfschema
          echo "$GITHUB_WORKSPACE/.tfschema" >> $GITHUB_PATH

      - name: Install tfenv
        run: |
          git clone https://github.com/tfutils/tfenv.git $GITHUB_WORKSPACE/.tfenv
          echo "$GITHUB_WORKSPACE/.tfenv/bin" >> $GITHUB_PATH

      - name: Install terraform
        working-directory: test/tfenvconf/terraform_${{ matrix.terraform_version }}
        run: |
          tfenv install
          tfenv use

      - name: Print Terraform version
        run: |
          terraform --version

      - name: Set Test-Suite
        id: test-suite
        env:
          TF_VERSION: ${{ matrix.terraform_version }}
        uses: actions/github-script@v4
        with:
          script: |
            console.log(`Setting test suite version based on ${process.env.TF_VERSION}`)
            const suite = process.env.TF_VERSION.replace('.', 'o')
            console.log(`Test suite set to ${suite}`)
            return suite
          result-encoding: string

      - name: Test
        run: |
          go test -v -run ^TestTerraform${{ steps.test-suite.outputs.result }}$
